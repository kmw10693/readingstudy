5장 객체 지향 설계5원칙(SOLID)
----------------------------------------------------

- 객체 지향 설계 5원칙

-객체지향의 특성을 올바르게 사용하기 위해 설계된 원칙
-응집도를 높이고, 결합도를 낮추기 위한 고전 원칙을 객체지향 관점에서 재정립한 것
-응집도(cohesion) : 하나의 모듈 내부에 존재하는 구성 요소들의 기능적 관련성으로, 응집도가 높은 모듈은 하나의 책임에 집중하고 독립성이 높아져 재사용이나 기능의 수정, 유지보수가 용이하다.
- 결합도(coupling) : 상호 의존 정도로, 결합도가 낮다는 것은 모듈 간의 상호 의존성이 줄어들어 객체의 재사용이나 기능의 수정, 유지보수가 용이하는 것을 의미한다.
- SoC(Separation Of Concerns) : 관심사 분리
+관심이 같은 것끼리는 하나의 객체안으로, 관심이 다른 것은 가능한 한 떨어져 서로 영향을 주지 않도록 분리해야 한다는 것으로, 하나의 속성/하나의 메소드/하나의 클래스/하나의 모듈/하나의 패키에는 하나의 관심사만 들어 있어야 한다는 것을 의미

SOLID 원칙을 작 적용하면 소스 파일의 개수가 더 많아 지는 경향이 있지만, 이는 논리를 더욱 잘 분할하고, 잘 표현하기에 이해하기 쉬우며 개발하기 쉽기 떄문에 유지/보수에 용의하다!

1. Single Responsility Principle( SRP ) : 단일 책임 원칙

- "어떤 클래스를 변경해야 하는 이유는 오직 하나뿐이어야 한다."
- [클래스, 속성, 메소드, 패키지, 모듈, 컴포넌트, 프레임워크 등]의 역할과 책임에 따라 분리하여 각각 하나의 역할과 책임을 갖게해야 함


2. Open Cloed Principle( OCP ) : 개방 폐쇄 원칙

- "자신의 확장에는 열려 있고, 주변의 변화에 대해서는 닫혀 있어야 한다."

3. Liskov Substitution Principle( LSP ) : 리스코프 치환 원칙

- "서브 타입은 언제나 자신의 기반타입(base type)으로 교체할 수 있어야한다."

- Ch.3에서 정리한 "상속"에서의 두 조건을 만족하면 리스코프 치환 원칙을 잘 지키고있다 할 수 있음

+ 하위 클래스 is a kind of 상위 클래스 : 하위 분류는 상위 분류의 한 종류다.
+ 구현 클래스 is able to 인터페이스 : 구현 분류는 인터페이스할 수 있어야 한다.

4. Interface Segregation Principle( ISP ) : 인터페이스 분리 원칙

- "클라이언트는 자신이 사용하지 않는 메소드에 의존 관계를 맺으면 안 된다."

5. Dependency Inversion Principle( DIP ) : 의존 역전 원칙

- "고차원 모듈은 저차원 모듈에 의존하면 안된다. 두 모듈 모두 다른 추상화된 것에 의존해야 한다."
- "추상화된 것은 구체적인 것에 의존하면 안된다. 구체적인 것이 추상화된 것에 의존해야 한다."
- "자주 변경되는 구체화된 클래스에 의존하면 안된다."
- 상위 클래스일수록, 인터페이스일수록, 추상 클래스일수록 변하지 않을 가능성이 높기에 하위 클래스나 구체화된 클래스가 아닌 상위 클래스일수록, 인터페이스일수록, 추상 클래스에 의존하라는 것
